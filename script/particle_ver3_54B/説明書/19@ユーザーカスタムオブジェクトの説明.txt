@ユーザーカスタムオブジェクト
	これ単体では意味を成しません
	このスクリプトと同じ階層にあるparticle_userobjフォルダ内にあるファイルを読み込んで使います
	カスタムオブジェクトとはユーザー自身がフィルター効果や図形をなどを駆使して作るオブジェクトのことです
	同梱していた『ﾊﾟｰﾃｨｸﾙｶｽﾀﾑｵﾌﾞｼﾞｪｸﾄｴｲﾘｱｽ』はexedit.aufと同じ階層に置いてください

――トラックバー説明
	・番号とはparticle_userobjフォルダ内になるカスタムオブジェクトを定義したファイルを指定する番号です
	└指定した番号のファイルがない場合はなにも起こりません

	・値1とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます
	└値の幅は-9999から9999までで、百分の一ずつ刻みです
	└値1はトラックバーの時間変化に対応しています

	・値2とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます
	└値の幅は-9999から9999までで、百分の一ずつ刻みです
	└値2はトラックバーの時間変化に対応しています

	・値3とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます
	└値の幅は-9999から9999までで、整数のみです
	└値3はトラックバーの時間変化に対応しています

――チェックボックス説明
	・相対時間とは基準となる時間がオブジェクトの時間から破片ごとの時間に切り替えるものです

――設定説明
	・設定値1とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます

	・設定値2とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます

	・設定値3とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます

	・設定値4とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます

	・設定値5とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます

	・設定値6とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます

	・設定値7とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます

	・設定値8とはカスタムオブジェクトで使うかもしれないものです
	└カスタムオブジェクトを定義したファイルごとに意味合いが変わってきます

	・色1とはカスタムオブジェクトで使うかもしれないものです

	・色2とはカスタムオブジェクトで使うかもしれないものです

	・図形1とはカスタムオブジェクトで使うかもしれないものです

	・図形2とはカスタムオブジェクトで使うかもしれないものです

	・チェックボックス1とはカスタムオブジェクトで使うかもしれないものです

	・チェックボックス2とはカスタムオブジェクトで使うかもしれないものです

	・使用引数とはカスタムオブジェクトで使う引数を決定するものです
	└入力欄には17個の0か1を入れます
	└先頭から値1、値2、値3、設定値1、設定値2、設定値3、設定値4、設定値5、設定値6、設定値7、設定値8、色1、色2、図形1、図形2、チェックボックス1、チェックボックス2に対応しています
	└引数に使用するパラメーターのところを1にして、それ以外は0にします

	・使い方表示とはカスタムオブジェクトの使い方を表示するものです
	└指定するカスタムオブジェクトに定義されていなと表示されません

――particle_renamer.exe説明
	・自作または他作のパーティクル(R)のカスタムオブジェクトが既存のファイルと名前が被った場合に使います
	└使い方はカスタムオブジェクトの関数が書かれたテキストファイルを実行ファイルに直接ドロップして使います
	└まとめて入っているフォルダをドロップすることも可能です
	└追加するテキストファイルに関連するエイリアスも一緒にドロップするとリネームされた番号にエイリアスも書き換えられます
	└変換後のファイルはparticle_userobjフォルダ内に作られます
	└テキストファイルはそのままで、エイリアスファイルは所定の場所(ﾊﾟｰﾃｨｸﾙｶｽﾀﾑｵﾌﾞｼﾞｪｸﾄｴｲﾘｱｽなど)に置き直してください
	└例としてparticle_userobj3.txtを作ったとして、particle_userobjのフォルダに既にparticle_userobj9.txtまであった場合、particle_userobj3.txtはparticle_userobj10.txtに名前が変更されます
	└particle_userobj3.txtに合わせて作ったエイリアスも一緒にドロップすると、内部のtrack0=3の部分がtrack0=10に書き換わったものが同時に作られます
	└複数の作者のものを同時にリネームするとおかしくなるかもしれません

――カスタムオブジェクトの定義の仕方の説明
	function particle_obj(t,t0,life,pi,pj,seed,track1,track2,track3,v1,v2,v3,v4,v5,v6,v7,v8,col1,col2,fig1,fig2,check1,check2)
	--とげとげを作ってみます
	--使用引数が正しくない場合に備えて、nilのときの処理を施しておく
	local v1=v1
	if v1==nil then v1=0 end
	--v1はとげの数なので、マイナスだった場合は0する
	if v1<0 then v1=0 end
	--とりあえず、サイズは200×200の仮想バッファを用意
	obj.setoption("drawtarget","tempbuffer",200,200)
	--v1の小数をカットする
	local num=math.floor(v1);
	--このオブジェクトの乱数を作る
	local ran=10*pi+55*pj+seed
	--四角形を呼び出す。色はcol1を使う
	obj.load("figure","四角形",col1)
	--破片ごとにとげの傾きを設定する。またとげの間隔の角度も設定する。三角関数を使うので、ラジアンに変換も同時に行う
	local deg=obj.rand(0,359,ran,0)*math.pi/180
	local degv=2*math.pi/num
	--時間変化をつけるための変数を作る。基本はt/lifeで始まりから終わりまで指定できる
	local par=t/life
	--とげを描写する。破片ごと、さらにとげごとに高さを変える
	--ついでにとげを伸縮させる
	for i=1,num do
		local high=obj.rand(50,80,seed,i)
		local dis=obj.rand(10,20,seed,i*3+1)
		local temp=obj.rand(1,10,seed,i*7+4)
		local dist=obj.rand(0,359,seed,i*11+7)*math.pi/180
		local radius=high+dis*math.sin(dist+temp*par)
		local theta=deg+degv*i
		local cos=math.cos(theta)
		local sin=math.sin(theta)
		local x1=radius*cos
		local y1=radius*sin
		local x2=-25*sin
		local y2=25*cos
		local x3=25*sin
		local y3=-25*cos
		obj.drawpoly(
		x1,y1,0,
		x1,y1,0,
		x2,y2,0,
		x3,y3,0
		)
	end
	--最後に中央に円を配置して終わり
	obj.load("figure","円",col1,70)
	obj.draw()
	obj.load("tempbuffer")
	--この関数をこのまま使う場合は使用引数をすべて1にします
	--最低限必要なものに絞るならば使用引数={0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0}にすれば、
	--function particle_obj(t,t0,life,pi,pj,seed,v1,col1)だけになります
	end

	function particle_disp()
	--この関数を定義していると使い方表示にチェックを入れたときにこのメッセージを表示することが可能になります
	obj.setfont("",50,4)
	obj.load("使用引数の四番目を1にしてください")
	obj.draw()
	obj.load("使うパラメーターは設定値1だけです")
	obj.draw(0,50)
	obj.load("入力数値は1以上の数字です")
	obj.draw(0,100)
	end


――関数の説明
	・引数の説明です
	└t:時間です
	└0秒からlifeまでになります
	└t+t0をするとおおよそobj.timeと等しくなります
	└t0:生成される時間です
	└@パーティクル本体の開始時間をいじっている場合はマイナスの値を取る場合もあります
	└life:生存時間です
	└@個別微調整や@時間を使っていない限り@パーティクル本体に入力した定数になります
	└@個別微調整や@時間の詳細は09@個別微調整と@時間と@時間2の説明をご覧ください
	└pi:パーティクルの順番です
	└0から始まる整数です
	└pj:同時発生数の番号です
	└0から始まる整数です
	└seed:乱数です
	└色々な要素を計算した結果の乱数で、@パーティクル本体のシード値と異なります
	└track1〜track3:トラックバーの値です
	└相対時間の有無で、多少変わって、中点を使う場合相対時間だと生存時間の間に中点を移動します
	└v1〜v9:設定値1〜9の値です
	└数値以外にも文字列やテーブルも可能です
	└col1,col2:色です
	└fig1,fig2:図形です
	└check1,check2:チェックです
	└中身は0か1です

	・引数は基本この順番です
	└使用引数で引数を減らすことができます
	└例
	使用引数={1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
	だと
	function particle_obj(t,t0,life,pi,pj,seed,track1)

	└例
	使用引数={0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1}
	だと
	function particle_obj(t,t0,life,pi,pj,seed,v1,check2)

	└第一引数と第二引数、第三引数、第四引数、第五引数、第六引数のtとt0、life、pi、pj、seedは必ず書いてください

	・戻り値は不要です
	└この関数ですることはあれこれいじくりまわして、仮想バッファで作ったものをobj.load("tempbuffer")で描写するので、戻り値は不要となります

	・保存するときは拡張子は.txtにしてください
	└ファイル名はparticle_userobj(1〜999の数字).txtです
	└保存場所はparticle_ri_ver3.anmと同じ場所にあるparticle_userobjのフォルダにしまってください

	・関数内で変数を宣言するときはローカル変数を推奨いたします
	└グローバル変数だとパーティクル内で使う変数を上書きする可能性がなきにしもアライズ

	・最後に描写先をフレームバッファにする必要はありません
	└partilce_set.func関数ですべて処理いたします
	└同様に合成方法を変えても0に戻す必要はありません

	・初期状態がすべて0だったり空だったりします
	└諸設定を済ませるまでは番号を0にするようにしてください
	└作ったらエイリアスを作ることをお勧めします

	・particle_disp関数は配布を前提としたものなので、なくてもあってもいいですが、あると親切です
	└定義されている場合、使い方表示にチェックが入ると表示できるようになります
