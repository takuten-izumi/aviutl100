--2016/02/28
--図形が正しく描画されていなかったのを修正しました
--[[
画像の輝度や透明度を元に変形させるエフェクトです。
このスクリプトより下にかけたエフェクトは歪みのソースにのみ使用されるので元の画像を変更しません。
]]

--track0:スケール,-5000,5000,100
--track1:X軸ずれ,-5000,5000,0
--track2:Y軸ずれ,-5000,5000,0
--track3:Z軸ずれ,-5000,5000,0
--check0:mapLayerのフィルタon,0
--dialog:スケール⇔移動/chk,local DD=0;スケールにも影響/chk,am_scale=0;分割数,local dv=10;縦分割数,local dvh=0;不透明度,local alp=100;点描画/chk,local drawpoint=0;点サイズ,local size=6;点色(or空欄)/col,pointcolor=nil;mapLayer,local map=0;ローポリ[0/2],low=0;ディレイ,local delay=0;輝度ディレイ/chk,local l_delay=0

dv = dv or 10
dvh = dvh or 0
local dn = obj.track0*.01
local Xd = obj.track1
local Yd = obj.track2
local Zd = obj.track3

local zoom=1
local prec=2 --図形精度
local gv=obj.getvalue
local org_w,org_h=obj.getpixel()
obj.copybuffer("cache:ORG","obj")

if gv("layer"..map..".x") then
  obj.load("layer",map,obj.check0)
end

local w,h= obj.getpixel()
obj.effect("領域拡張","上",(org_h-h)/2,"下",(org_h-h)/2,"左",(org_w-w)/2,"右",(org_w-w)/2)
w,h = org_w,org_h
local S=math.max(w,h)
local wdiv,hdiv=dv,dv*math.floor(S/h)
if dvh>0 then hdiv=dvh end
local wd,hd=w/dv, h/hdiv
local mapw,maph=w/(dv+1),h/(hdiv+1)
obj.effect()

local ROT = function(x,y,z,rx,ry,rz)
      local toRad=math.pi/180
      local x,y,z = x or obj.ox, y or obj.oy, z or obj.oz
      local rx,ry,rz = rx or obj.rx,ry or obj.ry,rz or obj.rz
      rx,ry,rz = rx*toRad,ry*toRad,rz*toRad
      local x0=x*math.cos(rz)-y*math.sin(rz)
      local y0=x*math.sin(rz)+y*math.cos(rz)
      local z0=z*math.cos(ry)-x0*math.sin(ry)
      return z*math.sin(ry)+x0*math.cos(ry),y0*math.cos(rx)-z0*math.sin(rx),y0*math.sin(rx)+z0*math.cos(rx)
end


if obj.index==0 then
 Displace_T={}
 Displace_C={}
end

local idx=obj.index+1
Displace_T[idx]={}
Displace_C[idx]={}


for i=0,wdiv do
  Displace_T[idx][i+1]={}
  Displace_C[idx][i+1]={}
  for j=0,hdiv do
      local col=obj.getpixel(i*mapw+mapw/2,j*maph+maph/2)
      local Y,cb,cr,a=obj.getpixel(i*mapw,j*maph,"yc")
      local Y=Y/4096
      local a=a/4096
      Displace_C[idx][i+1][j+1]={y,a,col}

      local pos={x=0,y=0,z=0}
      local rot={x=0,y=0,z=0}
      --local i_time = obj.time - ((i/wdiv)*(1-l_delay))*delay*.01 -(1-Y)*delay*.01*l_delay
      --local j_time = obj.time - ((j/hdiv)*(1-l_delay))*delay*.01 -(1-Y)*delay*.01*l_delay
      if l_delay==0 then
        i_time = obj.time -(1-i/wdiv)*delay*.01
        j_time = obj.time -(1-j/hdiv)*delay*.01
        else
        i_time = obj.time -(1-Y)*delay*.01
        j_time = obj.time -(1-Y)*delay*.01
      end

      i_time = math.max(0,math.min(i_time,obj.totaltime))
      j_time = math.max(0,math.min(j_time,obj.totaltime))
      pos = { x = gv("x",i_time)-obj.x , y = gv("y",j_time)-obj.y , z = gv("z",i_time)-obj.z }
      rot = { x = gv("rx",i_time), y = gv("ry",j_time), z = gv("rz",i_time)}

      local A=a-.5*DD
      local Y=Y-.5*DD
      local SC = (1+(dn*A*Y))*am_scale + (dn*(1-am_scale))
      local x=(i*wd)-(w*.5)
      local y=(j*hd)-(h*.5)
      local z=(A*Y)*Zd*10
      x,y = x*SC,y*SC
      local XD={x*(A*Y)*Xd*.01,(A*Y)*Xd*10}
      local YD={y*(A*Y)*Yd*.01,(A*Y)*Yd*10}
      x = x + XD[DD+1] + pos.x
      y = y + YD[DD+1] + pos.y

      Displace_T[idx][i+1][j+1]={x,y,z}
      x,y,z = ROT(x,y,z)
      Displace_T[idx][i+1][j+1].pixel={x+obj.ox,y+obj.oy,z+obj.oz}


    end
end


if low==2 then
  obj.load("figure","四角形",0xffffff,1)
else
  obj.copybuffer("obj","cache:ORG")
  --obj.zoom = obj.zoom*100/obj.getvalue("zoom")
end

local u0,v0, u1,v1, u2,v2, u3,v3 = 0,0, 0,0, 0,0, 0,0
alp=alp or 100
if alp>0 then
    local alp=alp*.01
    local w,h= obj.w,obj.h
    local wn,hn=w/(#Displace_T[idx]-1),h/(#Displace_T[idx][1]-1)

    for i=1,#Displace_T[idx]-1 do
      for j=1,#Displace_T[idx][1]-1 do

      local I,J=i-1,j-1
      if low<2 then
          u0,v0 = wn*I,    hn*J
          u1,v1 = wn*I+wn, v0
          u2,v2 = u1,      hn*J+hn
          u3,v3 = u0,      hn*J+hn
      end

      if drawpoint==1 then
        Displace_C[idx][i][j][3]=obj.getpixel(u0,v0)
      end
      --local P = {T[i][j],T[i+1][j],T[i+1][j+1],T[i][j+1],T[i+1][j+1],T[i][j+1]}
      local x0,y0,z0=unpack(Displace_T[idx][i][j])
      local x1,y1,z1=unpack(Displace_T[idx][i+1][j])
      local x2,y2,z2=unpack(Displace_T[idx][i+1][j+1])
      local x3,y3,z3=unpack(Displace_T[idx][i][j+1])

      if low==2 then
          obj.putpixel(0,0,Displace_C[idx][i+1][j+1][3],Displace_C[idx][i+1][j+1][2])
      elseif low==1 then
          local wc,hc=u0+wn/2,v0+hn/2
          u0,v0, u1,v1, u2,v2, u3,v3 = wc,hc, wc,hc, wc,hc, wc,hc
      end



      obj.drawpoly(x0,y0,z0, x1,y1,z1, x2,y2,z2, x2,y2,z2,u0,v0, u1,v1, u2,v2, u2,v2,alp)
       --if low==1 then obj.putpixel(0,0,T[i][j+1][3],T[i][j+1][2]) end
      obj.drawpoly(x0,y0,z0, x2,y2,z2, x3,y3,z3, x3,y3,z3,u0,v0, u2,v2, u3,v3, u3,v3,alp)
    end
  end
end

if drawpoint==1 then
      obj.zoom=obj.getvalue("zoom")/100
      obj.setoption("billboard",3)

  for i=1,#Displace_T[idx] do
    for j=1,#Displace_T[idx][i] do
      local y,a,col = unpack(Displace_C[idx][i][j])

      if a>0 then
        local x,y,z = unpack(Displace_T[idx][i][j].pixel)

        obj.load("figure","円",pointcolor or col,prec+size)
        obj.draw(x ,y ,z, 1 ,a,-obj.rx,-obj.ry,-obj.rz)
      end

    end
  end

end

if obj.index==obj.num-1 then
  Displace_T=nil
  Displace_C=nil
end
