--2016/02/20
--DrawPixel側は画像のアスペクト比を維持するように。

--2016/02/21
--謎のmath.floorを削除、画像のずれを修正。
--回転とずれに輝度の影響を与えるオプションの追加

--2016/02/24
--ディレイオプション追加。トラックバーでの移動と軸回転が対応します。
--デフォルトでは描画処理順でずれます。輝度ディレイにチェックで輝度差でズレ。
--このスクリプトより下にかけたフィルタは輝度マップとしてのみ使われます。
--画像読み込みフィルタも使用可能なので
--また輝度マップはレイヤーを指定したりすることもできます。

--2016/02/26
--個別オブジェクトにも対応。平面指定時のサイズはただのZ軸のｽﾞﾚに変更になっています。
---------------------------------------------------------------------------

@Sphere(DrawPixel)

---------------------------------------------------------------------------



--track0:サイズ,2,5000,300
--track1:回転,-1000,1000,10,1
--track2:ズレ,-360,360,0
--track3:輝度影響,-5000,5000,0
--check0:平面化,0
--dialog:輝度影響ﾓｰﾄﾞ/chk,local Lmode=0;回転にも影響/chk,local LtoP=0;分割,local dvw=10;縦分割,local dvh=10;複製数,local sp_layers=0;複製サイズ,local sp_layersize=3;点サイズ,local pointsize=10;色(空欄で画像色)/col,local color=nil;DOF(距離/範囲%),local dof={0,-100};DOF(強度),local blur=0;ディレイ,local delay=0;輝度ディレイ/chk,local l_delay=0;

local dvw,dvh = dvw or 20,dvh or 20
local mode = 0
if delay==nil then delay=0; l_delay=0; end
if obj.check0 then mode=1 end
local R,Ph,Th = obj.track0,obj.track1,obj.track2
local lum_amount = obj.track3
local sp_layers = sp_layers or 0
sp_layersize = sp_layersize or 0.5
sp_layersize = sp_layersize*.01
local pointsize = pointsize or 10
local Draw = draw_point or 1

local DPF={}

--リニア変換
local Linear =  function(t, t_min, t_max, v1, v2, limit )
  if not v1 then
    v1 , v2 = 0, 1
    limit = true
  end
  local c =(t_max - t_min)
  local n = t/c - t_min/c
  local V = v2-v1
  V = V * n + v1
  if not limit then
    return V
  else
    if v1>v2 then v1,v2=v2,v1 end
    V=math.max(v1,math.min(v2,V))
    return V
  end
end


--カメラ距離
--[[
local Camlen= function(pos,d)
  local x,y,z = pos[1],pos[2],pos[3] or 0
  local d=d or 0
  local cam = obj.getoption("camera_param")
  local len = math.sqrt((x-cam.tx-cam.x)^2+(y-cam.ty-cam.y)^2+(z-cam.tz-cam.z)^2)
  return len+d
end
]]

--回転行列
local ROT = function(x,y,z,rx,ry,rz)
  local toRad=math.pi/180
  local x,y,z = x or obj.ox, y or obj.oy, z or obj.oz
  local rx,ry,rz = rx or obj.rx,ry or obj.ry,rz or obj.rz
  rx,ry,rz = rx*toRad,ry*toRad,rz*toRad
  local x0=x*math.cos(rz)-y*math.sin(rz)
  local y0=x*math.sin(rz)+y*math.cos(rz)
  local z0=z*math.cos(ry)-x0*math.sin(ry)
  return z*math.sin(ry)+x0*math.cos(ry),y0*math.cos(rx)-z0*math.sin(rx),y0*math.sin(rx)+z0*math.cos(rx)
end

local DOF = function(mode,blur,focalpoint,aperture,pos,limit)
  local gv=obj.getvalue
  local mode = mode or 0
  local blur = blur or 0
  local focalpoint = focalpoint or 0
  local aperture = aperture or 100
  aperture = 1- aperture *.01
  local pos = pos

  if pos==nil then
  pos = {
  obj.x+obj.ox - obj.cx*gv("zoom")*.01,
  obj.y+obj.oy - obj.cy*gv("zoom")*.01,
  obj.z+obj.oz - obj.cz*gv("zoom")*.01
  }
  end

  local cam = obj.getoption("camera_param")
  local C = math.sqrt((cam.x - pos[1])^2+(cam.y - pos[2])^2+(cam.z - pos[3] )^2)
  local E = math.sqrt((cam.tx-cam.x)^2+(cam.ty-cam.y)^2+(cam.tz-cam.z)^2)
  local D = C-E
  local I = 1024 or cam.d
  local p =  ( D - focalpoint) / I
  if(mode==0)then
  p =  ( D - focalpoint - I + C ) / I
  end

  local a = math.abs(p)
  a = -(aperture-a)
  if(a<0)then a=0 end

  local blur_type="レンズブラー"
  if(blur<0)then blur_type="ぼかし" end
  blur=math.abs(blur)
  local coc =  blur*a

  if limit then
    local limit=math.max(blur,limit)
    if coc>limit then
    coc = limit
    end
  end

  if (obj.alpha>0 and blur~=0) then
  obj.effect(blur_type, "範囲", coc ,"サイズ固定",0)
  end

  local d=math.max(0,math.min(1-a,1))

  return d,p,a
end


--ピクセルデータの獲得
local GetPixel = function (dvw,dvh,mode,Lmode)
      local mode = mode or 0
      local w,h = obj.getpixel()
      local x,y,z = obj.x,obj.y,obj.z
      local dvw,dvh = dvw or w,dvh or h
      dvw = math.min(w,dvw)
      dvh = math.min(h,dvh)
      local wn,hn = w/dvw,h/dvh
      local T={}

      for i=0,dvw-1 do
        T[i]={}
        for j=0,dvh-1 do
          local u0,v0 = wn*i,    hn*j

          local col = obj.getpixel(u0,v0)
          local Y,Cb,Cr,a = obj.getpixel(u0,v0,"yc")
          local lum = Y/4096 - Lmode*.5
          a  = a/4096
          T[i][j]={x=(u0-w/2), y=(v0-h/2) ,col=col, alp=a*obj.alpha , lum=lum}
        end
      end

      T.wh = {dvw,dvh,w,h,wn,hn}
      T.mode = mode
      if mode==0 then
      table.insert(T,T[0])
      end
      return T
end

--球面用の座標生成しつつ頂点描画
local GenPos = function(T,R,Ph,Th,sp_layers,sp_layersize,pointsize,Draw,lum_amont,dof)

    -- 球座標 (動径=r,平面偏角=φ,高さ偏角=θ)
    local SPC = function(r,phi,theta)
      local x = math.sin(theta)*math.cos(phi)
      local z = math.sin(theta)*math.sin(phi)
      local y = math.cos(theta)
      return x*r,  -y*r,  z*r
    end

    local dof=dof or {0,0,100}
    local gp,toRad=obj.getpixel,math.pi/180
    local gv=obj.getvalue
    local zoom=gv("zoom")*.01
    local R,Ph,Th=R,toRad*Ph,toRad*Th
    local sp_layersize = sp_layersize or 1
    local rad = R * sp_layersize
    local lum_amount=lum_amount or 100
    lum_amount = lum_amount*.01
    local dn,sc=sp_layers,R/10
    local dw,dh=T.wh[1],T.wh[2]
    local w,h,wn,hn =T.wh[3],T.wh[4],T.wh[5],T.wh[6]
    local S=math.max(w,h)
    local mode = T.mode or 0
    local ox,oy,oz = obj.ox,obj.oy,obj.oz
    local cx,cy,cz = obj.cx,obj.cy,obj.cz
    obj.load("figure","四角形" ,0xffffff,1)
    obj.setoption("billboard",3)
    local F={}
    F[obj.index+1]={}
    F.whd = {dw,dh,sp_layers}
    F.mode = mode

    for i=0,#T do
      F[i]={}
      for j=0,#T[i] do
        F[i][j]={}

        local lum=T[i][j].lum
        local alp=T[i][j].alp
        local col=T[i][j].col
        local x,y=T[i][j].x,T[i][j].y
        x = (x+wn/2)*sc*.1
        y = (y+hn/2)*sc*.1
        if mode==0 then
        if j==0 then lum=T[0][j].lum end
        if j==#T[i]-1 then  lum=T[#T][j].lum end
        end

        local l=1+lum * lum_amount
        local al,dofA=1,0
        local i_time = obj.time - ((i/#T)    *(1-l_delay))*delay*.01 -(1-lum)*delay*.01*l_delay
              i_time = math.max(0,math.min(i_time,obj.totaltime))

        local j_time = obj.time - ((j/#T[i]) *(1-l_delay))*delay*.01 -(1-lum)*delay*.01*l_delay
              j_time = math.max(0,math.min(j_time,obj.totaltime))

        for k=0,dn do
          F[i][j][k]={}

          local k_time = obj.time - ((k/dn)    *(1-l_delay))*delay*.01 -(1-lum)*delay*.01*l_delay
                k_time = math.max(0,math.min(k_time,obj.totaltime))

          local pos = { x = gv("x",i_time), y = gv("y",j_time) , z = gv("z",i_time)}
          local rot = { x = gv("rx",i_time), y = gv("ry",j_time), z = gv("rz",i_time)}

          local z=((lum-.5)*sc*20*lum_amount + k*sc*0) + (k*sp_layersize*100*Th*10)

          if mode==1 then
            x,y,z = ROT(x,y,z,rot.x,rot.y,rot.z)
            x,y,z = x+pos.x+(ox-cx)*sc*.1,y+pos.y+(oy-cy)*sc*.1, z+pos.z+(oz-cx)*sc*.1
            ------DOF(mode,blur,focalpoint,aperture,pos,limit)
            if blur~=0 then
              al,dofA = DOF(0,0,dof[1],dof[2],{x,y,z},0)
            end
            alp=(alp*al)
            F[i][j][k].plane={x,y,z,lum,alp,col=col}
          end

          if mode==0 then
            if j==0 and j==#T[i] then l = 1 end
            local r = (R+rad*l*k)
            local p = Ph+math.pi*2*i/(dw)+Ph*k
            local t = Th+math.pi*j/(dh-2)
            x,y,z = SPC(r,  p+(p*l*Ph)*LtoP,  t+(t*l*Th)*LtoP)
            x,y,z = x*l,y*l,z*l
            x,y,z = ROT(x,y,z,rot.x ,rot.y ,rot.z )
            x,y,z = x+pos.x+ox, y+pos.y+oy, z+pos.z+oz
            if blur~=0 then
            al,dofA = DOF(0,0,dof[1],dof[2],{x,y,z},0)
            end
            alp=(alp*al)
            F[i][j][k].sphere={x, y, z,lum,alp,col=col}
          end

          if  alp>0 and lum>.001  then
            pointsize = pointsize or 10
            --obj.load("i="..i.."\nj="..j)
            local p_size = math.abs(pointsize*l)
            if p_size > pointsize*10 then p_size = pointsize*10 end
            obj.load("figure","円",(color or col),p_size)
            if blur<0 then
                obj.effect("レンズブラー","範囲",math.abs(blur)*(dofA),"サイズ固定",0)
              else
                obj.effect("ぼかし","範囲",blur*(dofA))
            end

            if mode==0 then
              if i<#T and j>0 and j<#T[i]-1 then
                obj.draw(x-obj.x,y-obj.y,z-obj.z,lum+.5,alp,-obj.rx,-obj.ry,-obj.rz)
              end
            else
                obj.draw(x-obj.x,y-obj.y,z-obj.z,lum+.5,alp,-obj.rx,-obj.ry,-obj.rz)
            end
          end

        end
      end
    end
    return F
end

--頂点のどこかに線を伸ばす
--[[
local Line=function(num,p0,p1,col,size,Ex,Ey,Ez)
local Ex,Ey,Ez = Ex or "linear",Ey or "linear",Ez or "linear"
local x0,y0,z0 = p0[1],p0[2],p0[3] or 0
local x1,y1,z1 = p1[1],p1[2],p1[3] or 0
local E=require("easing")
local len = math.sqrt( (x0-x1)^2 + (y0-y1)^2 + (z0-z1)^2)
local n = num/len
obj.load("figure","円",(col or 0x8acaee),(size or 10))
for i=0,n-1 do
local x = (x0-x1)/num * E[Ex](i/n ,0,1,1,1)
local y = (y0-z1)/num * E[Ey](i/n ,0,1,1,1)
local z = (y0-z1)/num * E[Ez](i/n ,0,1,1,1)
obj.draw(x,y,z)
end
end
]]

local DPF={Linear = Linear,GetPixel=GetPixel,GenPos=GenPos,Line=Line,CamLen=CamLen,ROT=ROT,DOF=DOF}
--return DPF
obj.copybuffer("cache:FACETS"..obj.index,"obj")
obj.effect()

if obj.index==0 then
Draw_facet_poly={}
end
Draw_facet_poly[obj.index]={}

local T = GetPixel(dvw,dvh,mode,Lmode)
local dof = dof or {0,0}
dof[3] = blur or 0
--if Lmode==1 then lum_amount=lum_amount*.5 end

Draw_facet_poly[obj.index].T = GenPos(T,R,Ph,Th,sp_layers,sp_layersize,pointsize,Draw,lum_amount,dof)
Draw_facet_poly.layer = obj.layer
Draw_facet_poly.num = obj.num


---------------------------------------------------------------------------


@Sphere(Feacets)


---------------------------------------------------------------------------

--track0:scale,1,5000,100
--track1:消滅ｻｲｽﾞ,1,4000,200
--track2:フェード,1,5000,100
--track3:不透明度,0,700,100
--check0:輝度を透明度に,0
--dialog:色(空欄でmap色)/col,local col=nil;画像を貼る/chk,local drawpict=0;map画像を使用/chk,local use_map=0;map透明度無視/chk,local n_alpha=0;
--**再分割/chk,local subdiv=0;
local scale = obj.track0*.01
local dist  = obj.track1
local fade  = obj.track2
local alpha = obj.track3*.01
obj.copybuffer("cache:FACETS_TEX","obj")
local FacetsSP=function(T,col,alp,dist,fade,scale,subdiv,drawpict,lum2alp,use_map,n_alpha,idx)

--スケール
local Scale = function(v,X,Y,Z,t)
    local X,Y,Z = X, Y or X ,Z or X
    local t=t or 0
    local lum=v[4] or 1
    lum = (1-t) + lum*t
    return {v[1]*X*lum ,v[2]*Y*lum ,v[3]*Z*lum ,v[4] or 1,v[5] or 1}
end

--重心座標を求めて頂点との距離を出す　(距離、輝度平均、アルファ平均、重心座標)
local BCL = function(...)
    local t = {...}
    local L=#t
    local x,y,z,l,a=0,0,0,0,0
    for i=1,L do
    x=x+t[i][1]
    y=y+t[i][2]
    z=z+t[i][3]
    l=l+t[i][4]
    a=a+t[i][5]
    end
    local X,Y,Z = x/L,y/L,z/L
    local len = math.sqrt( (t[1][1] - X)^2 + (t[1][2] - Y)^2+(t[1][3] - Z)^2)
    return  len ,l/L, a/L ,{X,Y,Z}
end

local Linear =  function(t, t_min, t_max, v1, v2, limit )
    if not v1 then
    v1 , v2 = 0, 1
    limit = true
    end
    local c =(t_max - t_min)
    local n = t/c - t_min/c
    local V = v2-v1
    V = V * n + v1
    if not limit then
    return V
    else
    if v1>v2 then v1,v2=v2,v1 end
    V=math.max(v1,math.min(v2,V))
    return V
    end
end


--交換
--[[
local PosChg = function(t,v0,v1,L)
    local v={}
    L=L or #t
    for i=1,L do
    v[i] = (1-t)*v1[i] + t*v0[i]
    end
    return v
end
]]


local s = scale or 1
local xn,yn,zn = unpack(T.whd)
local dist,fade =dist or 500,fade or 200
local drawpict=drawpict or 0
local facetmode=T.mode or 0
local subdiv = subdiv or 0
local mode={"sphere","plane"}
mode=mode[facetmode+1]
obj.setoption("billboard",0)
obj.pixeloption("type","col")
local u0,v0, u1,v1, u2,v2, u3,v3 = 0,0,0,0,0,0,0,0
local wn,hn= 0,0

if drawpict==1 then
  if use_map==1 then
    obj.copybuffer("obj","cache:FACETS"..idx)
    obj.effect()
    else
    obj.copybuffer("obj","cache:FACETS_TEX")
    obj.effect()
  end

  local w,h=obj.getpixel()
  wn,hn = w/(xn-1),h/(yn-1)
else
  obj.load("figure","四角形",col or 0xffffff,1)
end

for x=0,#T-1 do
  for y=0,#T[x]-2+facetmode do
    local xx = (x+1)%xn
    local yy = (y+1)%yn
    if fasetmode==1 then
      xx,yy=x+1,y+1
    end
    local u0,v0 = wn*x,    hn*y
    local u1,v1 = wn*x+wn, hn*y
    local u2,v2 = wn*x+wn, hn*y+hn
    local u3,v3 = wn*x,    hn*y+hn
    --if not drawpict==1 then u0,v0, u1,v1, u2,v2, u3,v3 = 0,0,0,0,0,0,0,0 end

    for z=0,zn do
      if drawpict~=1 and col==nil then
        obj.putpixel(0,0,T[x][y][z][mode].col,1,1)
      end
      local p0 = T[x][y][z][mode]
      local p1 = T[xx][y][z][mode]
      local p2 = T[xx][yy][z][mode]
      local p3 = T[x][yy][z][mode]
      local x0,y0,z0,l0,a0  = unpack(Scale(p0,s,s,s,Lm or 0))
      local x1,y1,z1,l1,a1  = unpack(Scale(p1,s,s,s,Lm or 0))
      local x2,y2,z2,l2,a2  = unpack(Scale(p2,s,s,s,Lm or 0))
      local x3,y3,z3,l3,a3  = unpack(Scale(p3,s,s,s,Lm or 0))
      --local ll = 1
      --local aa = 1

      local len,ll,aa,p4  = BCL(p0,p1,p2,p3)

      if n_alpha==1 then
        aa = 1 --(a0+a1+a2+a3)/4
      end

      if not (lum2alp) then
        ll = 1 --(l0+l1+l2+l3)/4 --輝度平均
      end

      local x4,y4,z4  = unpack(Scale(p4,s*aa,s*aa,s*aa,s*aa,Lm or 0))
      local alp=alp or 1

      if len>dist then
        alp=Linear(len,dist,dist+fade ,alp,0,1,"")
      end

      alp=(alp*ll*aa)^2
      alp = math.max(0,math.min(alp,3))

      if subdiv==1 then
        obj.drawpoly( x0,y0,z0, x1,y1,z1, x4,y4,z4, x4,y4,z4, u0,v0, u1,v1, u2,v2, u2,v2, alp)
        obj.drawpoly( x1,y1,z1, x2,y2,z2, x4,y4,z4, x4,y4,z4, u0,v0, u1,v1, u2,v2, u2,v2, alp)
        obj.drawpoly( x2,y2,z2, x3,y3,z3, x4,y4,z4, x4,y4,z4, u0,v0, u2,v2, u3,v3, u3,v3, alp)
        obj.drawpoly( x0,y0,z0, x4,y4,z4, x3,y3,z3, x3,y3,z3, u0,v0, u2,v2, u3,v3, u3,v3, alp)
      else
        obj.drawpoly( x0,y0,z0, x1,y1,z1, x2,y2,z2, x2,y2,z2, u0,v0, u1,v1, u2,v2, u2,v2, alp)
        obj.drawpoly( x0,y0,z0, x2,y2,z2, x3,y3,z3, x3,y3,z3, u0,v0, u2,v2, u3,v3, u3,v3, alp)
      end

      end
    end
  end
end

local lum2alp = obj.check0

if Draw_facet_poly then
  if Draw_facet_poly.layer==obj.layer then
    obj.setfont("Koruri",20)
    obj.load("Sphere(DrawPixel)よりも下のレイヤーで使用して下さい")
    obj.draw(-obj.x ,-obj.y ,-obj.z ,1,1,-obj.rx,-obj.ry,-obj.rz)
  else
    for idx=0,Draw_facet_poly.num-1 do
      FacetsSP(Draw_facet_poly[idx].T,col,alpha,dist, fade, scale, (subdiv or 0), drawpict, lum2alp, (use_map or 0), (n_alpha or 0),idx)
    end
  end
else
  obj.setfont("",20)
  obj.load("Sphere(DrawPixel)を実行していないと使用できません")
  obj.draw()
end

if obj.time==obj.totaltime then Draw_facet_poly=nil end
