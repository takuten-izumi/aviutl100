--param:1

--obj.getpoint関数で設定値、中点数、現在の値、現在の時間を取得する
local p=obj.getpoint("param")
local num=obj.getpoint("num")
local index,ratio = math.modf(obj.getpoint("index"))
local ot=obj.getpoint("time")
local st,et,sv,ev
local s=Ignore_Point[p].s
--全体化にチェックがあり、直線移動とランダム移動でないとき全体化を実行する
--全体化は全体の進行度をそれぞれの移動方法に変えるだけ
if Ignore_Point[p].c==1 and s~=1 and s~=9 then
	local ott=obj.getpoint("time",num-1)
	if s==2 then
		ot=ott*(1-math.cos(ot/ott*math.pi*.5))
	elseif s==3 then
		ot=ott*math.sin(ot/ott*math.pi*.5)
	elseif s==4 then
		ot=ott*(1-math.cos(ot/ott*math.pi))*.5
	elseif s==5 then
		local sv0,ev0
		sv=0
		local s0,s1
		s0=0
		for i=0,num-1 do
			s1=obj.getpoint("time",i+1)
			if Ignore_Point[p][i]==0 then
				sv0=sv
				sv=s0
			end
			if s0<=ot and ot<=s1 then
				ev=nil
				ev0=nil
				for j=i+1,num-1 do
					if Ignore_Point[p][j]==0 then
						if ev==nil then
							ev=obj.getpoint("time",j)
						else
							ev0=obj.getpoint("time",j)
							break
						end
					end
				end
				if ev0==nil then
					ev0=ev
				end
				local p0=Ignore_Point[p].v
				local p1=(ot-sv)/(ev-sv)
				local p2=1-p1
				ot=sv*p2*p2*p2+(sv+p0*(ev-sv0))*3*p1*p2*p2+(ev-p0*(ev0-ev))*3*p1*p1*p2+ev*p1*p1*p1
				break
			end
			s0=s1
		end
	elseif s==6 then
		local sv0,ev0
		sv=0
		local s0,s1
		s0=0
		for i=0,num-1 do
			s1=obj.getpoint("time",i+1)
			if Ignore_Point[p][i]==0 then
				sv0=sv
				sv=s0
			end
			if s0<=ot and ot<=s1 then
				ev=nil
				ev0=nil
				for j=i+1,num-1 do
					if Ignore_Point[p][j]==0 then
						if ev==nil then
							ev=obj.getpoint("time",j)
						else
							ev0=obj.getpoint("time",j)
							break
						end
					end
				end
				if ev0==nil then
					ev0=ev
				end
				ot=obj.interpolation((ot-sv)/(ev-sv),sv0,sv,ev,ev0)
				break
			end
			s0=s1
		end
	elseif s==7 then
		local PATH = {}
		local path = package.path .. ";"
		while(1)do
			local n=path:find(";")
			if n then
				PATH[#PATH + 1] = path:sub(1, n - 1)
				path = path:sub(n + 1, #path)
			else
				break
			end
		end
		if not PATH[2]:find("script\\?.lua") then
			PATH[3]=PATH[2]:sub(1, PATH[2]:find("\\script\\")) .. "script\\?.lua"
			package.path = package.path .. ";" .. PATH[3]
		end
		ot=require("easing_aviutl").easing(Ignore_Point[p].v,ot/ott,0,ott,1)
	elseif s==8 then
		local Orbit=function(t,x1,y1,x2,y2)
			local s=1-t
			x1=(3*s*s*x1+(3*s*x2+t)*t)*t
			y1=(3*s*s*y1+(3*s*y2+t)*t)*t
			return x1,y1
		end
		local L=obj.getpoint("link")
		local n=Ignore_Point[p].v
		local q1x=OrbitNumber[n][1]
		local q1y=OrbitNumber[n][2]
		local q2x=OrbitNumber[n][3]
		local q2y=OrbitNumber[n][4]
		local obt=OrbitNumber[n][5]
		ratio=ot/ott
		local t1=0
		local t2=1
		for i=1,10 do
			local tm=(t1+t2)*.5
			local xm,y=Orbit(tm,q1x,q1y,q2x,q2y)
			if ratio<xm then
				t2=tm
			else
				t1=tm
			end 
		end
		x1,ratio=Orbit((t1+t2)*.5,q1x,q1y,q2x,q2y)
		if obt==0 then
			ot=ot+(ott-ot)*ratio;
		else
			if obt==L+1 then
				ot=ot+(ott-ot)*ratio;
			end
		end
	end
	local s0=obj.getpoint("time",0)
	local s1
	index=nil
	for i=0,num do
		s1=obj.getpoint("time",i+1)
		if s0<=ot and ot<=s1 then
			index=i
			break;
		end
		s0=s1
	end
	if index==nil then
		index=num-2
	end
	s=1
end
--処理内容はだいたい同じ
--現在の中点番号から遡って無視設定が0となる番号を探す
--次に現在の中点番号から上がっていき、無視設定が0となる番号を探す
--これによって1である値を無視して、0と0で区切られた区間で値を変化させられる
--あとはそれぞれの移動方法で値を変化させるだけ
if s==1 then
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			return sv+(ev-sv)*(ot-st)/(et-st)
		end
	end
elseif s==2 then
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			return sv+(ev-sv)*(1-math.cos((obj.getpoint("time")-st)/(et-st)*math.pi*.5))
		end
	end
elseif s==3 then
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			return sv+(ev-sv)*math.sin((obj.getpoint("time")-st)/(et-st)*math.pi*.5)
		end
	end
elseif s==4 then
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			return sv+(ev-sv)*(1-math.cos((obj.getpoint("time")-st)/(et-st)*math.pi))*.5
		end
	end
elseif s==5 then
	local sv0,ev0
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			if i==0 then
				sv0=sv
			else
				for j=i-1,0,-1 do
					if Ignore_Point[p][j]==0 then
						sv0=obj.getpoint(j)
						break
					end
				end
			end
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			if i==num-1 then
				ev0=ev
			else
				for j=i+1,num-1 do
					if Ignore_Point[p][j]==0 then
						ev0=obj.getpoint(j)
						break
					end
				end
			end
			local p0=Ignore_Point[p].v
			local p1=(obj.getpoint("time")-st)/(et-st)
			local p2=1-p1
			return sv*p2*p2*p2+(sv+p0*(ev-sv0))*3*p1*p2*p2+(ev-p0*(ev0-ev))*3*p1*p1*p2+ev*p1*p1*p1
		end
	end
elseif s==6 then
	local sv0,ev0
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			if i==0 then
				sv0=sv
			else
				for j=i-1,0,-1 do
					if Ignore_Point[p][j]==0 then
						sv0=obj.getpoint(j)
						break
					end
				end
			end
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			if i==num-1 then
				ev0=ev
			else
				for j=i+1,num-1 do
					if Ignore_Point[p][j]==0 then
						ev0=obj.getpoint(j)
						break
					end
				end
			end
			return obj.interpolation((obj.getpoint("time")-st)/(et-st),sv0,sv,ev,ev0)
		end
	end
elseif s==7 then
	local PATH = {}
	local path = package.path .. ";"
	while(1)do
		local n=path:find(";")
		if n then
			PATH[#PATH + 1] = path:sub(1, n - 1)
			path = path:sub(n + 1, #path)
		else
			break
		end
	end
	if not PATH[2]:find("script\\?.lua") then
		PATH[3]=PATH[2]:sub(1, PATH[2]:find("\\script\\")) .. "script\\?.lua"
		package.path = package.path .. ";" .. PATH[3]
	end
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			return require("easing_aviutl").easing(Ignore_Point[p].v,(obj.getpoint("time")-st)/(et-st),sv,ev-sv,1)
		end
	end
elseif s==8 then
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			local Orbit=function(t,x1,y1,x2,y2)
				local s=1-t
				x1=(3*s*s*x1+(3*s*x2+t)*t)*t
				y1=(3*s*s*y1+(3*s*y2+t)*t)*t
				return x1,y1
			end
			local L=obj.getpoint("link")
			local n=Ignore_Point[p].v
			local q1x=OrbitNumber[n][1]
			local q1y=OrbitNumber[n][2]
			local q2x=OrbitNumber[n][3]
			local q2y=OrbitNumber[n][4]
			local obt=OrbitNumber[n][5]
			ratio=(obj.getpoint("time")-st)/(et-st)
			local t1=0
			local t2=1
			for i=1,10 do
				local tm=(t1+t2)*.5
				local xm,y=Orbit(tm,q1x,q1y,q2x,q2y)
				if ratio<xm then
					t2=tm
				else
					t1=tm
				end 
			end
			x1,ratio=Orbit((t1+t2)*.5,q1x,q1y,q2x,q2y)
			if obt==0 then
				return sv+(ev-sv)*ratio;
			else
				if obt==L+1 then
					return sv+(ev-sv)*ratio
				else
					return obj.getpoint("default")
				end
			end
		end
	end
elseif s==9 then
	for i=index,0,-1 do
		if Ignore_Point[p][i]==0 then
			st=obj.getpoint("time",i)
			sv=obj.getpoint(i)
			break
		end
	end
	for i=index+1,num-1 do
		if Ignore_Point[p][i]==0 then
			et=obj.getpoint("time",i)
			ev=obj.getpoint(i)
			local v1,v2,v3,v4
			if tostring(Ignore_Point[p].v):find("table:") then
				v1=Ignore_Point[p].v[1]
				if v1==nil then v1=1 end
				v2=Ignore_Point[p].v[2]
				if v2==nil then v2=-100 end
				v3=Ignore_Point[p].v[3]
				if v3==nil then v3=100 end
				v4=Ignore_Point[p].v[4]
				if v4==nil then v4=(10+i)*7 else v4=(v4+i)*7 end
			else
				v1=Ignore_Point[p].v
				if sv<ev then
					v2=sv-100
					v3=ev+100
				else
					v3=sv+100
					v2=ev-100
				end
				v4=(10+i)*7
			end
			local n0,n1,n2
			n0=math.floor((et-st)/v1)
			n2=(obj.getpoint("time")-st)/v1
			n1=math.floor(n2)
			if (et-st)/v1-n0<0.5 then
				if n0==0 then
					n2=(obj.getpoint("time")-st)/(et-st)
				else
					n0=n0-1
					if n1==n0 or n1==n0+1 then
						n1=n1-n1+n0
						n2=st+n0*v1
						n2=(obj.getpoint("time")-n2)/(et-n2)
					else
						n2=n2-n1
					end
				end
			else
				if n1==n0 then
					n2=st+v1*n0
					n2=(obj.getpoint("time")-n2)/(et-n2)
				else
					n2=n2-n1
				end
			end
			local s0,e0,s1,e1
			if n1==0 then
				s0=sv
				s1=sv
			elseif n1==1 then
				s0=sv
				s1=obj.rand(v2,v3,-n1-2,v4)
			else
				s0=obj.rand(v2,v3,-n1-1,v4)
				s1=obj.rand(v2,v3,-n1-2,v4)
			end
			if n1+1==n0 then
				e1=ev
				e0=obj.rand(v2,v3,-n1-3,v4)
			elseif n1==n0 then
				e1=ev
				e0=ev
			else
				e0=obj.rand(v2,v3,-n1-3,v4)
				e1=obj.rand(v2,v3,-n1-4,v4)
			end
			return obj.interpolation(n2,s0,s1,e0,e1)
		end
	end
end
--					return obj.getpoint("default")
return obj.getpoint(index)
