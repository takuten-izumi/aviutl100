--track0:ガイド高さ,-100,100,0
--check0:ガイドを表示,1
--dialog:アンカー座標,pos={};トーン1（暗）,local tone1="tone_line16.png";拡大率1,local zoom1=30;トーン2,local tone2="tone_dot12.png";拡大率2,local zoom2=20;トーン3,local tone3="tone_dot8.png";拡大率3,local zoom3=0;トーン4（明）,local tone4="";拡大率4,local zoom4=100;
local zoom_num = {zoom1,zoom2,zoom3,zoom4}
local tone_num = {tone1,tone2,tone3,tone4}
--------------------------------------------------
--[[ このファイル自身がスクリプトです、内容を濫りに変更しないようにしましょう
--------------------------------------------------
** readme **

漫画化スクリプトver2（制作者：gometh）

〜使い方〜

1.まず「exedit.auf」のあるフォルダと同じ階層に「script」フォルダを作り、その中へ
　「漫画化v2.anm（このファイル）」と「tone_○○.png」を全てコピーしてください。
　あるいは、「script」フォルダの中に更にフォルダを作り、その中にコピーしても構いません。

2.AviUtlを再起動すれば、導入は完了です。アニメーション効果から「漫画化v2」が選べるようになります。

3.メイン画面のアンカーポイントを操作して、トーンの範囲を設定してください。
　ガイドは黒→白のグラデーションになっており、アンカーポイントのX座標と対応しています。
　また、アンカーポイントをZの字状に配置すれば、任意のトーンの範囲を0にできます。

4.「漫画化v2」という名前は変更しても構いません。作者が以前作成した「漫画化」と互換性が無いため、意図しない上書きを避ける為にこのような名前になっています。


〜設定項目〜

○「アンカー座標」に「 {} 」と入力すると、アンカーポイントが均等割付されます。
　そこからメイン画面のアンカーポイントを操作すれば、新たな数値が自動的に入力されます。

○「トーンn」には、このスクリプトが置いてあるフォルダからの相対パスでトーン画像を指定してください。拡張子まで必須です。

○「拡大率n」は、100を等倍とした数値でトーンを拡縮します。

○「トーンn」の画像が存在し、かつ「拡大率n」が0より大きい場合のみトーンが有効となり、色数（アンカーポイント）が追加されます。


〜注意事項〜

○相対パスプラグインが有効になっていると動作しません。無効にするようお願いします。

○ガイドがONの状態でも、エンコード時は自動的に非表示になります。その際はオブジェクトのサイズが変わる場合があるので、他エフェクトへの影響に注意してください。

○トーンの数がデフォルトの4種類で足りない場合は、このファイルの3〜5行目をよく見て項目を増やしてください。（7種類まで増設可能）


--------------------------------------------------
-- readmeここまで
--------------------------------------------------
]]

obj.copybuffer("cache:manga_org","obj")
local w,h = obj.getpixel()

local anchor_num = 3
for i,tonei in ipairs(tone_num) do
  if obj.copybuffer("tmp","image:"..tonei) and zoom_num[i]>0 then  -- 有効なトーンの数をカウントする
    obj.copybuffer("cache:tone"..anchor_num-2,"tmp")
    zoom_num[i],tone_num[i] = zoom_num[anchor_num-2],tone_num[anchor_num-2]
    anchor_num = anchor_num+1
  end
end

local n = anchor_num*2-1


if not pos[1] then  -- アンカーを設定
  for i=1,anchor_num do
    pos[i*2-1] = (2*(i-1)/(anchor_num-1)-1)*math.min(obj.screen_w/3,w/2)
    pos[i*2] = 0
  end
end
obj.setanchor("pos",anchor_num,"line","color",obj.check0 and 0xff0000 or 0xffffff)
if pos[1]>=pos[n] then return end

local range,center = {},{}  -- アンカーの割合を輝度の範囲へ変換
local sum=0
for i=1,anchor_num-1 do
  range[i] = math.max(0,math.min(math.max(pos[i*2+1],pos[1]),pos[n])-(pos[1]+sum*(pos[n]-pos[1])/4096))*4096/(pos[n]-pos[1])
  center[i] = math.floor(range[i]/2+sum)
  sum = sum + range[i]
end


obj.setoption("drawtarget","tempbuffer")
if obj.check0 and not obj.getinfo("saving") then  -- ガイドを描画
  obj.effect("領域拡張","左",math.max(-w/2-pos[1],-w/2+pos[n]),"右",math.max(-w/2-pos[1],-w/2+pos[n]))
  w,h = obj.getpixel()
  obj.copybuffer("tmp","obj")
  obj.load("figure","四角形",0,1)
  obj.effect("領域拡張","右",127,"左",127)
  for i=0,255 do obj.putpixel(i,0,RGB(i,i,i),1) end
  obj.drawpoly(pos[1],-10-h*obj.track0/200,0,pos[n],-10-h*obj.track0/200,0,pos[n],10-h*obj.track0/200,0,pos[1],10-h*obj.track0/200,0)
  obj.copybuffer("cache:manga_org","tmp")
end

for i=1,anchor_num-3 do  -- トーン画像をw,hに合わせて画像ループさせる
  obj.copybuffer("obj","cache:tone"..i)
  local tonew,toneh = obj.getpixel()
  local m,e = math.frexp(100/zoom_num[i])  -- 単純に画像ループすると表示がおかしくなる（最大画像サイズの問題ではなく、ループ回数が一定以上になると元画像の端が削られる感じ）
  for j=2,e do
    obj.effect("画像ループ","横回数",2,"縦回数",2)  -- なるべく劣化を起こさないようにリサイズする
    obj.effect("リサイズ","拡大率",50)
  end
  obj.effect("リサイズ","拡大率",SHIFT(50,math.max(0,1-e))/m)
  obj.effect("画像ループ","横回数",math.ceil(100*w/(SHIFT(tonew,math.max(0,e-1))*zoom_num[i])),"縦回数",math.ceil(100*h/(SHIFT(toneh,math.max(0,e-1))*zoom_num[i])))
  tonew,toneh = obj.getpixel()
  tonew,toneh = (tonew-w)/2,(toneh-h)/2
  obj.effect("クリッピング","上",math.ceil(toneh),"下",math.floor(toneh),"左",math.ceil(tonew),"右",math.floor(tonew))
  obj.copybuffer("cache:tone"..i,"obj")
end

obj.setoption("blend","alpha_sub")  -- トーン背景から指定輝度を抜いた画像をalpha_subして、指定輝度のみトーンが貼られた画像を生成
for i=2,anchor_num-2 do
  if range[i] > 0 then
    obj.copybuffer("tmp","cache:tone"..i-1)
    obj.copybuffer("obj","cache:manga_org")
    obj.effect("カラーキー","色差範囲",4096,"輝度範囲",math.floor(range[i]/2),"color_yc",string.format("%04x",OR(SHIFT(AND(center[i],255),8),SHIFT(center[i],-8))).."00000000","status",1)
    obj.draw()
    obj.copybuffer("cache:tone"..i-1,"tmp")
  end
end
obj.copybuffer("obj","cache:manga_org")  -- 白色も同じようにキーイング
obj.effect("カラーキー","色差範囲",4096,"輝度範囲",math.floor(range[anchor_num-1]),"color_yc","001000000000","status",1)
obj.effect("反転","透明度反転",1)
obj.effect("単色化","強さ",100,"輝度を保持する",0,"color",0xffffff)
obj.copybuffer("cache:tone"..anchor_num-2,"obj")


obj.setoption("blend",0)  -- 黒背景
obj.setoption("drawtarget","tempbuffer",w,h)
obj.load("figure","四角形",0,4)
obj.drawpoly(-w/2,-h/2,0, w/2,-h/2,0, w/2,h/2,0, -w/2,h/2,0)

for i=2,anchor_num-1 do  -- 各トーン画像を上書き
  if range[i]>0 then
    obj.copybuffer("obj","cache:tone"..i-1)
    obj.draw()
  end
end


obj.setoption("blend","alpha_sub")  -- マスク
obj.copybuffer("obj","cache:manga_org")
obj.effect("反転","透明度反転",1)
obj.draw()

obj.copybuffer("obj","tmp")