--2019/3/26 Aviutl用カスタムオブジェクト 動く曲線 白い豚作成 Rev0.1
--AviUtl拡張編集画面にてカスタムオブジェクト「@動く曲線_FrontLine_Obj」を作成し
--その下のレイヤーに図形「円」等のオブジェクトを作成してください。
--説明は動画をご参照願います


@動く曲線_FrontLine_Obj
--track0:頂点数,3,16,3,1
--track1:ライン幅,1,1000,20
--track2:分割数,1,50,20,1
--dialog:色/col,col=0xffff00;両端を丸める/chk,maru=0;座標,pos={};

ERR_MES="エラー：アニメーション効果から「@動く曲線B_1.初期化」を呼び出し、頂点数と同じ数のオブジェクトを配置してください"
obj.setfont("MS UI Gothic",35,1,0x111111,0xeeeeee)
obj.load("text",ERR_MES)

pos={}
obj.ox=0
obj.oy=0

l=math.floor(obj.track1)/2
NN=obj.track0-1
BN=obj.track2

--ここからpos取得
t0=obj.layer

for i=0,NN do
 local ogvx,ogvy

 tlay=t0 + i + 1
 
 if FLB_Flag[tlay]==tlay then
  ogvx=FLB_pos[2*tlay+1]
  ogvy=FLB_pos[2*tlay+2]
 else
  local lx="layer"..tlay..".x"
  local ly="layer"..tlay..".y"
  ogvx=obj.getvalue(lx)
  ogvy=obj.getvalue(ly)
 end
 
 pos[2*i+1]=ogvx
 pos[2*i+2]=ogvy

end

obj.setanchor("pos",NN+1,"line")
XX={}  
YY={}
for i=0,NN do
  XX[i]=pos[2*i+1]
  YY[i]=pos[2*i+2]
end

--補完曲線の算定(さつき様スクリプト集FIGURE の曲線矢印より一部を改変して使用)
function PassXYZ(s) -- s<=1
  Ns=NN*s
  Ns1=math.floor(Ns)
  Ns2=(Ns-Ns1)/2
  if Ns1<=0 then
    nx=Ax[1]*Ns2*Ns2+Bx[1]*Ns2+Cx[1]
    ny=Ay[1]*Ns2*Ns2+By[1]*Ns2+Cy[1]
  elseif Ns1==NN-1 then
    SS1=Ns2+0.5
    nx=Ax[Ns1]*SS1*SS1+Bx[Ns1]*SS1+Cx[Ns1]
    ny=Ay[Ns1]*SS1*SS1+By[Ns1]*SS1+Cy[Ns1]
  elseif s==1 then
    nx=XX[NN]
    ny=YY[NN]
  else
    SS1=Ns2+0.5
    SS2=Ns2
    RS=2*Ns2
    nx=(Ax[Ns1]*SS1*SS1+Bx[Ns1]*SS1+Cx[Ns1])*(1-RS)+RS*(Ax[Ns1+1]*SS2*SS2+Bx[Ns1+1]*SS2+Cx[Ns1+1])
    ny=(Ay[Ns1]*SS1*SS1+By[Ns1]*SS1+Cy[Ns1])*(1-RS)+RS*(Ay[Ns1+1]*SS2*SS2+By[Ns1+1]*SS2+Cy[Ns1+1])
  end
  return nx,ny
end

Ax={};Bx={};Cx={};
Ay={};By={};Cy={};
for M=1,NN-1 do
  Ax[M]=2*XX[M-1]-4*XX[M]+2*XX[M+1]
  Bx[M]=-3*XX[M-1]+4*XX[M]-XX[M+1]
  Cx[M]=XX[M-1]
  Ay[M]=2*YY[M-1]-4*YY[M]+2*YY[M+1]
  By[M]=-3*YY[M-1]+4*YY[M]-YY[M+1]
  Cy[M]=YY[M-1]
end

Nmax=NN*BN

--仮想バッファサイズ計算

w = 0
h = 0
--for i=0,NN do
--  dx = math.ceil(math.abs(pos[i*2+1])+l+size+1)
--  dy = math.ceil(math.abs(pos[i*2+2])+l+size+1)
--  if( w < dx ) then w = dx end
--  if( h < dy ) then h = dy end
--end
x0 = pos[1]
y0 = pos[2]

xmax=math.abs(x0)
ymax=math.abs(y0)


for i=1,Nmax do
  x1,y1 = PassXYZ(i/(NN*BN))
  r = math.atan2(y0-y1,x1-x0)
  dx = math.sin(r)*l
  dy = math.cos(r)*l
  x0 = x1
  y0 = y1
 xmax=math.max(xmax,math.abs(x0))
 ymax=math.max(ymax,math.abs(y0))

end
--obj.setoption("drawtarget","tempbuffer",w*2.5,h*2.5)
obj.setoption("drawtarget","tempbuffer",2*xmax + 2*l,2*ymax + 2*l)


--ライン描画
obj.load("figure","四角形",col,1)
obj.setoption("blend","alpha_mix")
x0 = pos[1]
y0 = pos[2]
for i=1,Nmax do
  x1,y1 = PassXYZ(i/(NN*BN))
  r = math.atan2(y0-y1,x1-x0)
  dx = math.sin(r)*l
  dy = math.cos(r)*l
  obj.drawpoly(x0-dx,y0-dy,0,x1-dx,y1-dy,0,x1+dx,y1+dy,0,x0+dx,y0+dy,0)
  x0 = x1
  y0 = y1
end

--頂点の描画
obj.load("figure","円",col,l*8)
for i=1-maru,Nmax-1+maru do
  x0,y0 = PassXYZ(i/(NN*BN))
  obj.drawpoly(x0-l,y0-l,0,x0+l,y0-l,0,x0+l,y0+l,0,x0-l,y0+l,0)
end


obj.setoption("blend",0)
obj.load("tempbuffer")
